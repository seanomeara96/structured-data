{"version":3,"sources":["components/necessaryItems.js","components/estimatedCost.js","components/estimatedTime.js","components/button.js","components/input.js","generators/generateHowTo.js","helpers/copyTextToClipBoard.js","generators/generateImage.js","generators/generateName.js","generators/generateUrl.js","generators/generateHowToDirection.js","components/output.js","generators/generateEstimatedCost.js","generators/generateTotalTime.js","generators/generateHowToTool.js","generators/generateHowToSupply.js","generators/generateHowToStep.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["NecessaryItems","this","props","itemList","map","id","type","name","itemUrl","imgUrl","imgAlt","ListItem","removeItem","updateItem","className","onClick","addItem","Component","onChange","e","target","value","required","placeholder","EstimatedCost","updateHandler","EstimatedTime","intervalUpdateHandler","intervalValue","durationUpdateHandler","durationValue","Button","children","clickHandler","Input","style","height","width","padding","boxSizing","updateEstimatedCost","fields","estimatedCost","updateEstimatedTimeInterval","updateEstimatedTimeDuration","estimatedTimeInterval","estimatedTimeDuration","includesNecessaryItems","addNecessity","removeNecessity","updateNecessity","necessities","changeHandler","updateNecessities","includeNecessaryItems","includesSteps","Steps","steps","addStep","updateStepTextInput","addNewDirection","updateDirection","removeDirection","includeSteps","step","Step","updateStepUrl","addDirection","updateDirections","rank","url","directions","imgSrc","direction","contemt","generateHowTo","join","copyTextToClipboard","text","navigator","clipboard","writeText","then","console","log","err","error","textArea","document","createElement","top","left","position","body","appendChild","focus","select","msg","execCommand","removeChild","fallbackCopyTextToClipboard","generateImage","src","altText","length","generateName","generateUrl","generateHowToDirection","Output","microData","push","cost","generateEstimatedCost","timeInterval","duration","generateTotalTime","forEach","toolName","toolUrl","tool","generateHowToTool","supplyName","supplyUrl","supply","generateHowToSupply","count","urlForStep","i","content","generateHowToStep","useState","color","setColor","backgroundColor","cursor","innerText","onMouseDown","onMouseUp","App","state","setState","interval","necessaryItems","update","itemsList","index","findIndex","filter","item","parseInt","Math","random","newDirection","stepId","find","newStep","inputName","stepsList","directionId","updatedDirections","display","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fe2aa0b5.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nexport default class NecessaryItems extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.itemList.map(\n          ({ id, type, name, itemUrl, imgUrl, imgAlt }) => (\n            <ListItem\n              key={id}\n              id={id}\n              type={type}\n              name={name}\n              itemUrl={itemUrl}\n              imgUrl={imgUrl}\n              imgAlt={imgAlt}\n              removeItem={this.props.removeItem}\n              updateItem={this.props.updateItem}\n            />\n          )\n        )}\n        <i className=\"ui button\" onClick={this.props.addItem}>\n          Add Item\n        </i>\n      </div>\n    );\n  }\n}\n\nfunction ListItem(props) {\n  return (\n    <div className=\"field\">\n      <label>Item Type</label>\n      <select\n        id=\"type\"\n        onChange={(e) => props.updateItem(props.id, { type: e.target.value })}\n        value={props.type}\n        name=\"item-type\"\n      >\n        <option value=\"tool\">Tool</option>\n        <option value=\"supply\">Supply</option>\n      </select>\n      <label>Item Name</label>\n      <input\n        id=\"name\"\n        name=\"name\"\n        onChange={(e) => props.updateItem(props.id, { name: e.target.value })}\n        value={props.name}\n        type=\"text\"\n        required\n        placeholder=\"Item Name\"\n      />\n      <label>Item Url</label>\n      <input\n        id=\"itemUrl\"\n        placeholder=\"Link to item where possible\"\n        name=\"item-url\"\n        value={props.itemUrl}\n        onChange={(e) =>\n          props.updateItem(props.id, { itemUrl: e.target.value })\n        }\n        type=\"text\"\n      />\n      <label>Item Img Url</label>\n      <input\n        id=\"imgUrl\"\n        name=\"image-url\"\n        value={props.imgUrl}\n        onChange={(e) => props.updateItem(props.id, { imgUrl: e.target.value })}\n        type=\"text\"\n      />\n      <label>Item Img Alt text</label>\n      <input\n        id=\"image-alt\"\n        name=\"image-alt\"\n        value={props.imgAlt}\n        onChange={(e) => props.updateItem(props.id, { imgAlt: e.target.value })}\n        type=\"text\"\n      />\n      <i\n        className=\"ui button\"\n        onClick={() => {\n          props.removeItem(props.id);\n        }}\n      >\n        Remove This Item\n      </i>\n    </div>\n  );\n}\n","export default function EstimatedCost(props) {\n  return (\n    <div className=\"field\">\n      <label>Estimated Cost</label>\n      <input\n        type=\"text\"\n        name=\"estimated-cost\"\n        placeholder=\"Estimated Cost\"\n        onChange={(e) => {\n          props.updateHandler(e.target.value);\n        }}\n        value={props.value}\n      />\n    </div>\n  );\n}\n","export default function EstimatedTime(props) {\n  return (\n    <div className=\"field\">\n      <label>Estimated Time</label>\n      <select\n        onChange={(e) => {\n          props.intervalUpdateHandler(e.target.value);\n        }}\n        value={props.intervalValue}\n        id=\"estimated-time-interval\"\n        name=\"estimated-time-interval\"\n      >\n        <option value=\"minutes\">Minutes</option>\n        <option value=\"hours\">Hours</option>\n      </select>\n      <input\n        placeholder=\"Estimated Time\"\n        type=\"text\"\n        name=\"estimated-time-duration\"\n        id=\"estimated-time-duration\"\n        onChange={(e) => props.durationUpdateHandler(e.target.value)}\n        value={props.durationValue}\n      />\n    </div>\n  );\n}\n","export default function Button({ children, clickHandler }) {\n  return (\n    <i onClick={clickHandler} className=\"ui button\">\n      {children}\n    </i>\n  );\n}\n","import { Component } from \"react\";\nimport NecessaryItems from \"./necessaryItems\";\nimport EstimatedCost from \"./estimatedCost\";\nimport EstimatedTime from \"./estimatedTime\";\nimport Button from \"./button\";\nexport default class Input extends Component {\n  render() {\n    return (\n      <div\n        style={{\n          height: \"100%\",\n          width: \"100%\",\n          padding: \"2rem\",\n          boxSizing: \"border-box\",\n        }}\n      >\n        <form className=\"ui form\">\n          <EstimatedCost\n            updateHandler={this.props.updateEstimatedCost}\n            value={this.props.fields.estimatedCost}\n          />\n          <EstimatedTime\n            intervalUpdateHandler={this.props.updateEstimatedTimeInterval}\n            durationUpdateHandler={this.props.updateEstimatedTimeDuration}\n            intervalValue={this.props.fields.estimatedTimeInterval}\n            durationValue={this.props.fields.estimatedTimeDuration}\n          />\n          <div>\n            <h2>Necessary Items:</h2>\n            {this.props.fields.includesNecessaryItems ? (\n              <NecessaryItems\n                addItem={this.props.addNecessity}\n                removeItem={this.props.removeNecessity}\n                updateItem={this.props.updateNecessity}\n                itemList={this.props.fields.necessities}\n                changeHandler={this.props.updateNecessities}\n              />\n            ) : (\n              <Button clickHandler={this.props.includeNecessaryItems}>\n                Include Tools &amp; Materials\n              </Button>\n            )}\n          </div>\n          <div>\n            <h2>Steps</h2>\n            {this.props.fields.includesSteps ? (\n              <Steps\n                steps={this.props.fields.steps}\n                addStep={this.props.addStep}\n                updateStepTextInput={this.props.updateStepTextInput}\n                addNewDirection={this.props.addNewDirection}\n                updateDirection={this.props.updateDirection}\n                removeDirection={this.props.removeDirection}\n              />\n            ) : (\n              <Button clickHandler={this.props.includeSteps}>\n                Include Steps\n              </Button>\n            )}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction Steps(props) {\n  return (\n    <div>\n      {props.steps.map((step) => (\n        <Step\n          key={step.id}\n          updateStepTextInput={props.updateStepTextInput}\n          updateStepUrl={props.updateStepUrl}\n          addDirection={props.addDirection}\n          updateDirections={props.updateDirections}\n          addNewDirection={props.addNewDirection}\n          removeDirection={props.removeDirection}\n          updateDirection={props.updateDirection}\n          removeDirection={props.removeDirection}\n          step={step}\n        />\n      ))}\n      <Button clickHandler={props.addStep}>Add Step</Button>\n    </div>\n  );\n}\n\nfunction Step(props) {\n  const { id, name, rank, url, directions, imgSrc, imgAlt } = props.step;\n  return (\n    <div className=\"field\">\n      <h3>{`Step ${rank + 1}`}</h3>\n      <label>Step Title</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={({ target }) =>\n          props.updateStepTextInput(id, target.name, target.value)\n        }\n        placeholder=\"Step Title\"\n      />\n      <label>Step URL</label>\n      <input\n        type=\"text\"\n        name=\"url\"\n        onChange={({ target }) =>\n          props.updateStepTextInput(id, target.name, target.value)\n        }\n        placeholder=\"Step URL\"\n        value={url}\n      />\n      <label>Image Src</label>\n      <input\n        type=\"text\"\n        name=\"imgSrc\"\n        value={imgSrc}\n        onChange={({ target }) =>\n          props.updateStepTextInput(id, target.name, target.value)\n        }\n      />\n      <label>Img Alt</label>\n      <input\n        type=\"text\"\n        name=\"imgAlt\"\n        value={imgAlt}\n        onChange={({ target }) =>\n          props.updateStepTextInput(id, target.name, target.value)\n        }\n      />\n      <label>Directions</label>\n      {directions.map((direction) => (\n        <div>\n          <textarea\n            id={direction.id}\n            value={direction.contemt}\n            onChange={(e) => {\n              props.updateDirection(id, direction.id, e.target.value);\n            }}\n          ></textarea>\n          <Button clickHandler={() => props.removeDirection(id, direction.id)}>\n            Remove Direction\n          </Button>\n        </div>\n      ))}\n      <Button clickHandler={() => props.addNewDirection(id)}>\n        Add Direction\n      </Button>\n    </div>\n  );\n}\n","export default function generateHowTo(children = []) {\n  return `<div itemscope itemtype=\"https://schema.org/HowTo\">${children.join(\n    \"\\n\"\n  )}\n  </div>`;\n}\n","function fallbackCopyTextToClipboard(text) {\n  var textArea = document.createElement(\"textarea\");\n  textArea.value = text;\n\n  // Avoid scrolling to bottom\n  textArea.style.top = \"0\";\n  textArea.style.left = \"0\";\n  textArea.style.position = \"fixed\";\n\n  document.body.appendChild(textArea);\n  textArea.focus();\n  textArea.select();\n\n  try {\n    var successful = document.execCommand(\"copy\");\n    var msg = successful ? \"successful\" : \"unsuccessful\";\n    console.log(\"Fallback: Copying text command was \" + msg);\n  } catch (err) {\n    console.error(\"Fallback: Oops, unable to copy\", err);\n  }\n\n  document.body.removeChild(textArea);\n}\nexport default function copyTextToClipboard(text) {\n  if (!navigator.clipboard) {\n    fallbackCopyTextToClipboard(text);\n    return;\n  }\n  navigator.clipboard.writeText(text).then(\n    function () {\n      console.log(\"Async: Copying to clipboard was successful!\");\n    },\n    function (err) {\n      console.error(\"Async: Could not copy text: \", err);\n    }\n  );\n}\n","/**\n *\n * @param {string} src e.g. https://example.com/photos/1x1/photo-step4.jpg\n * @param {string} altText\n * @returns\n */\nexport default function generateImage(src = \"\", altText = \"\") {\n  if (src.length) {\n    return `<img itemprop=\"image\" alt=\"${altText}\" src=\"${src}\"/>`;\n  }\n  return \"\";\n}\n","/**\n *\n * @param {string} name\n * @returns`<div itemprop=\"name\">${name}</div>`\n */\nexport default function generateName(name = \"\") {\n  if (name.length) {\n    return `<div itemprop=\"name\">${name}</div>`;\n  }\n  return \"\";\n}\n","/**\n *\n * @param {string} text\n * @param {string} url\n * @returns itemprop url\n */\nexport default function generateUrl(url = \"\", text = \"\") {\n  if (url.length) {\n    if (text.length) return `<a itemprop=\"url\" href=\"${url}\">${text}</a>`;\n    return `<link itemprop=\"url\" href=\"${url}\" />`;\n  }\n  return \"\";\n}\n","/**\n * \n * @param {string} text e.g. Allow the thin-set mortar to set. This usually takes about 12 hours.\n      Don't mix the grout before the mortar is set, because you don't want the grout to dry out!\n      To apply, cover the area thoroughly with grout and make sure you fill all the joints by\n      spreading it across the tiles vertically, horizontally, and diagonally. Then fill any\n      remaining voids with grout.\n * @returns \n */\nexport default function generateHowToDirection(text = \"\") {\n  if (text.length) {\n    return `<div itemprop=\"itemListElement\" itemscope itemtype=\"https://schema.org/HowToDirection\">\n    <div itemprop=\"text\">${text}</div>\n  </div>`;\n  }\n  return \"\";\n}\n","import React, { useState } from \"react\";\nimport generateHowTo from \"../generators/generateHowTo\";\nimport copyTextToClipboard from \"../helpers/copyTextToClipBoard\";\nimport generateEstimatedCost from \"../generators/generateEstimatedCost\";\nimport generateTotalTime from \"../generators/generateTotalTime\";\nimport generateHowToTool from \"../generators/generateHowToTool\";\nimport generateHowToSupply from \"../generators/generateHowToSupply\";\nimport generateHowToStep from \"../generators/generateHowToStep\";\nexport default function Output({ fields }) {\n  let microData = [];\n  if (fields.estimatedCost) {\n    microData.push(generateEstimatedCost(fields.estimatedCost));\n  }\n  if (fields.estimatedTimeInterval && fields.estimatedTimeDuration) {\n    microData.push(\n      generateTotalTime(\n        fields.estimatedTimeInterval,\n        fields.estimatedTimeDuration\n      )\n    );\n  }\n  if (fields.necessities.length) {\n    fields.necessities.forEach(({ name, type, itemUrl, imgUrl, imgAlt }) => {\n      if (type === \"tool\") {\n        microData.push(generateHowToTool(name, itemUrl, imgUrl, imgAlt));\n      } else if (type === \"supply\") {\n        microData.push(generateHowToSupply(name, itemUrl, imgUrl, imgAlt));\n      } else {\n        console.log(\"something gone wrong in output.js\");\n      }\n    });\n  }\n  if (fields.steps.length) {\n    let count = 1;\n    fields.steps.forEach((step) => {\n      microData.push(\n        generateHowToStep(count, step.name, step.url, step.directions)\n      );\n      count++;\n    });\n  }\n  const [color, setColor] = useState(\"lightblue\");\n  return (\n    <div\n      style={{\n        height: \"100%\",\n        width: \"100%\",\n        padding: \"2rem\",\n        boxSizing: \"border-box\",\n        backgroundColor: color,\n        cursor: \"pointer\",\n      }}\n      onClick={({ target }) => {\n        copyTextToClipboard(target.innerText);\n      }}\n      onMouseDown={() => {\n        setColor(\"blue\");\n      }}\n      onMouseUp={() => {\n        setColor(\"lightblue\");\n      }}\n    >\n      {generateHowTo(microData)}\n    </div>\n  );\n}\n","/**\n * estimated cost in eur\n * @param {number} cost\n * @returns\n */\nexport default function generateEstimatedCost(cost = 0) {\n  if (cost) {\n    return `<div>About <span itemprop=\"estimatedCost\" itemscope itemtype=\"https://schema.org/MonetaryAmount\">\n    <meta itemprop=\"currency\" content=\"EUR\"/>\n    <meta itemprop=\"value\" content=\"cost\"/>\n    €${cost}\n  </span>\n  </div>`;\n  }\n  return \"\";\n}\n","/**\n * i have decided that the time interval will either be minutes or hours\n */\n/**\n *\n * @param {string} timeInterval\n * @param {number} duration\n * @returns string\n */\nexport default function generateTotalTime(\n  timeInterval = \"minutes\",\n  duration = 0\n) {\n  if (duration) {\n    return `<div>About <span itemprop=\"totalTime\" content=\"PT${duration}${\n      timeInterval === \"hours\" ? \"H\" : \"M\"\n    }\">${duration} ${timeInterval}</span></div>`;\n  }\n  return \"\";\n}\n","import generateImage from \"./generateImage\";\nimport generateName from \"./generateName\";\nimport generateUrl from \"./generateUrl\";\n/**\n * a tool is used but not consumed during the how to process\n */\n/**\n *\n * @param {string} toolName\n * @param {string} toolUrl link to tool\n * @param {string} imgUrl link to img url\n * @param {string} imgAlt link to img\n * @returns\n */\nexport default function generateHowToTool(\n  toolName,\n  toolUrl = \"\",\n  imgUrl = \"\",\n  imgAlt = \"\"\n) {\n  console.log(imgUrl);\n  const tool = generateName(toolName);\n  return `<div itemprop=\"tool\" itemscope itemtype=\"https://schema.org/HowToTool\">\n    ${toolUrl.length ? generateUrl(toolUrl, tool) : tool}\n    ${imgUrl.length ? generateImage(imgUrl, imgAlt) : \"\"}\n  </div>`;\n}\n","import generateImage from \"./generateImage\";\nimport generateName from \"./generateName\";\nimport generateUrl from \"./generateUrl\";\n/**\n * a supply is used consumed during the how to process\n */\n/**\n *\n * @param {string} supplyName\n * @param {string} supplyUrl link to supply\n * @param {string} imgUrl link to image of the supply\n * @param {string} imgAlt image alt\n * @returns\n */\nexport default function generateHowToSupply(\n  supplyName,\n  supplyUrl = \"\",\n  imgUrl = \"\",\n  imgAlt = \"\"\n) {\n  const supply = generateName(supplyName);\n  return `<div itemprop=\"supply\" itemscope itemtype=\"https://schema.org/HowToSupply\">\n   ${supplyUrl.length ? generateUrl(supplyUrl, supply) : supply}\n   ${imgUrl.length ? generateImage(imgUrl, imgAlt) : \"\"}\n  </div>`;\n}\n","import generateHowToDirection from \"./generateHowToDirection\";\nimport generateImage from \"./generateImage\";\nimport generateUrl from \"./generateUrl\";\nimport generateName from \"./generateName\";\n/**\n * A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection and/or HowToTip items.\n/**\n * @param {number} stepNumber\n * @param {string} name\n * @param {string} urlForStep e.g. https://example.com/example#step4\n * @param {object[]} directions e.g. [\"Allow the thin-set mortar to set. This usual...\", \"Then, with a moist sponge, sponge away the excess grout...\"]\n * @param {string} imgSrc\n * @param {string} imgAlt\n * @returns\n */\nexport default function generateHowToStep(\n  stepNumber = 1,\n  name = \"\",\n  urlForStep = \"\",\n  directions = [],\n  imgSrc = \"\",\n  imgAlt = \"\"\n) {\n  return `<div id=\"step-${stepNumber}\" itemprop=\"step\" itemscope itemtype=\"https://schema.org/HowToStep\">\n    ${urlForStep.length ? generateUrl(urlForStep) : \"\"}\n    ${name.length ? generateName(name) : \"\"}\n    ${imgSrc.length ? generateImage(imgSrc, imgAlt) : \"\"}\n    ${directions.map((i) => generateHowToDirection(i.content)).join(\"\\n\")}\n  </div>`;\n}\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport Input from \"./components/input\";\nimport Output from \"./components/output\";\nclass App extends Component {\n  state = {\n    estimatedTimeInterval: \"minutes\",\n    estimatedTimeDuration: \"\",\n    estimatedCost: \"\",\n    necessities: [],\n    steps: [],\n    includesNecessaryItems: false,\n    includesSteps: false,\n  };\n  updateEstimatedCost = (cost) => this.setState({ estimatedCost: cost });\n  updateEstimatedTimeDuration = (duration) =>\n    this.setState({ estimatedTimeDuration: duration });\n  updateEstimatedTimeInterval = (interval) =>\n    this.setState({ estimatedTimeInterval: interval });\n  updateNecessities = (necessaryItems) =>\n    this.setState({ necessities: necessaryItems });\n  includeNecessaryItems = () => this.setState({ includesNecessaryItems: true });\n  includeSteps = () => this.setState({ includesSteps: true });\n  updateNecessity = (id, update) => {\n    let itemsList = [...this.state.necessities];\n    let index = itemsList.findIndex((i) => i.id === id);\n    itemsList[index] = { ...itemsList[index], ...update };\n    this.setState({ necessities: itemsList });\n  };\n  removeNecessity = (id) => {\n    this.setState({\n      necessities: this.state.necessities.filter((item) => item.id !== id),\n    });\n  };\n  addNecessity = () => {\n    this.setState({\n      necessities: [\n        ...this.state.necessities,\n        {\n          id: \"tool-supply\" + parseInt(Math.random() * 1000),\n          type: \"tool\",\n          name: \"\",\n          itemUrl: \"\",\n          imgUrl: \"\",\n          imgAlt: \"\",\n        },\n      ],\n    });\n  };\n  newDirection = () => {\n    return { id: \"direction-id\" + parseInt(Math.random() * 1000), content: \"\" };\n  };\n  addNewDirection = (stepId) => {\n    let steps = [...this.state.steps];\n    let step = steps.find((i) => i.id === stepId);\n    step.directions.push(this.newDirection());\n    this.setState({ steps });\n  };\n  addStep = () => {\n    const newStep = {\n      id: \"step-id\" + parseInt(Math.random() * 1000),\n      rank: this.state.steps.length,\n      name: \"\",\n      url: \"\",\n      imgSrc: \"\",\n      imgAlt: \"\",\n      directions: [this.newDirection()],\n    };\n    this.setState({ steps: [...this.state.steps, newStep] });\n  };\n  updateStepTextInput = (id, inputName, text) => {\n    let stepsList = [...this.state.steps];\n    let index = stepsList.findIndex((i) => i.id === id);\n    stepsList[index][inputName] = text;\n    this.setState({ steps: stepsList });\n  };\n  updateDirection = (stepId, directionId, content) => {\n    let steps = [...this.state.steps];\n    let step = steps.find((i) => i.id === stepId);\n    let direction = step.directions.find((i) => i.id === directionId);\n    direction.content = content;\n    this.setState({ steps });\n  };\n  removeDirection = (stepId, directionId) => {\n    let steps = [...this.state.steps];\n    let step = steps.find((i) => i.id === stepId);\n    let updatedDirections = step.directions.filter((i) => i.id !== directionId);\n    step.directions = updatedDirections;\n    this.setState({ steps });\n  };\n  render() {\n    console.log(\"app state\", this.state);\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          width: \"100%\",\n          height: \"100%\",\n        }}\n      >\n        <div style={{ width: \"50%\", height: \"100%\" }}>\n          <Input\n            fields={this.state}\n            updateEstimatedCost={this.updateEstimatedCost}\n            updateEstimatedTimeDuration={this.updateEstimatedTimeDuration}\n            updateEstimatedTimeInterval={this.updateEstimatedTimeInterval}\n            updateNecessities={this.updateNecessities}\n            includeNecessaryItems={this.includeNecessaryItems}\n            addNecessity={this.addNecessity}\n            updateNecessity={this.updateNecessity}\n            removeNecessity={this.removeNecessity}\n            includeSteps={this.includeSteps}\n            addStep={this.addStep}\n            addNewDirection={this.addNewDirection}\n            updateStepTextInput={this.updateStepTextInput}\n            updateDirection={this.updateDirection}\n            removeDirection={this.removeDirection}\n          />\n        </div>\n        <div style={{ width: \"50%\", height: \"100%\" }}>\n          <Output fields={this.state} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}